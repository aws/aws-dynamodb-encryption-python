[tox]
envlist =
    py{27,34,35,36}-{local,integ}-fast, nocmk,
    bandit, doc8, readme,
    flake8, pylint,
    flake8-tests, pylint-tests,
    vulture

# Additional environments:
# vulture :: Runs vulture. Prone to false-positives.
# linters :: Runs all linters over all source code.
# linters-tests :: Runs all linters over all tests.

[testenv:base-command]
commands = pytest --basetemp={envtmpdir} -l --cov dynamodb_encryption_sdk {posargs}

[testenv]
passenv =
    # Identifies AWS KMS key id to use in integration tests
    AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID \
    # Pass through AWS credentials
    AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \
    # Pass through AWS profile name (useful for local testing)
    AWS_PROFILE
sitepackages = False
deps = -rtest/requirements.txt
commands =
    # Only run small test scenario sets
    local-fast: {[testenv:base-command]commands} -m "local and not slow and not veryslow and not nope"
    integ-fast: {[testenv:base-command]commands} -m "integ and not slow and not veryslow and not nope"
    all-fast: {[testenv:base-command]commands} -m "not slow and not veryslow and not nope"
    # Also run moderately large test scenario sets
    local-slow: {[testenv:base-command]commands} -m "local and not veryslow and not nope"
    integ-slow: {[testenv:base-command]commands} -m "integ and not veryslow and not nope"
    all-slow: {[testenv:base-command]commands} -m "not veryslow and not nope"
    # Also run very large test scenario sets
    local-full: {[testenv:base-command]commands} -m "local and not nope"
    integ-full: {[testenv:base-command]commands} -m "integ and not nope"
    all-full: {[testenv:base-command]commands} -m "not nope"
    # Only run extremely large test scenario sets
    local-nope: {[testenv:base-command]commands} -m "local and nope"
    integ-nope: {[testenv:base-command]commands} -m "integ and nope"
    all-nope: {[testenv:base-command]commands} -m "nope"
    # Do not select any specific markers
    manual: {[testenv:base-command]commands}

# Verify that local tests work without environment variables present
[testenv:nocmk]
basepython = python3
sitepackages = False
deps = -rtest/requirements.txt
commands = {[testenv:base-command]commands} -m "local and not slow and not veryslow and not nope"

# mypy
[testenv:mypy-coverage]
commands =
    # Make mypy linecoverage report readable by coverage
    python -c \
        "t = open('.coverage', 'w');\
        c = open('build/coverage.json').read();\
        t.write('!coverage.py: This is a private format, don\'t read it directly!\n');\
        t.write(c);\
        t.close()"
    coverage report -m

[testenv:mypy-py3]
basepython = python3
deps =
    coverage
    mypy
    mypy_extensions
    typing>=3.6.2
commands =
    python -m mypy \
        --linecoverage-report build \
        src/dynamodb_encryption_sdk/
    {[testenv:mypy-coverage]commands}

[testenv:mypy-py2]
basepython = python3
deps =
    coverage
    mypy
    mypy_extensions
    typing>=3.6.2
commands =
    python -m mypy \
        --py2 \
        --linecoverage-report build \
        src/dynamodb_encryption_sdk/
    {[testenv:mypy-coverage]commands}

# Linters
[testenv:flake8]
basepython = python3
deps =
    flake8
    flake8-docstrings
    flake8-import-order
    # https://github.com/JBKahn/flake8-print/pull/30
    flake8-print>=3.1.0
commands =
    flake8 \
        src/dynamodb_encryption_sdk/ \
        setup.py \
        doc/conf.py

[testenv:flake8-tests]
basepython = {[testenv:flake8]basepython}
deps = {[testenv:flake8]deps}
commands =
    flake8 \
        # Ignore F811 redefinition errors in tests (breaks with pytest-mock use)
        # Ignore D103 docstring requirements for tests
        --ignore F811,D103 \
        test/

[testenv:pylint]
basepython = python3
deps =
    {[testenv]deps}
    pyflakes
    pylint
commands =
    pylint \
        --rcfile=src/pylintrc \
        src/dynamodb_encryption_sdk/  \
        setup.py \
        doc/conf.py

[testenv:pylint-tests]
basepython = {[testenv:pylint]basepython}
deps = {[testenv:pylint]deps}
commands =
    pylint \
        --rcfile=test/pylintrc \
        test/unit/ \
        test/acceptance/ \
        test/functional/ \
        test/integration/

[testenv:doc8]
basepython = python3
deps =
    sphinx
    doc8
commands = doc8 doc/index.rst README.rst CHANGELOG.rst

[testenv:readme]
basepython = python3
deps = readme_renderer
commands = python setup.py check -r -s

[testenv:bandit]
basepython = python3
deps = bandit
commands = bandit -r src/dynamodb_encryption_sdk/

# Prone to false positives: only run independently
[testenv:vulture]
basepython = python3
deps = vulture
commands = vulture src/dynamodb_encryption_sdk/

[testenv:linters]
basepython = python3
deps =
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:doc8]deps}
    {[testenv:readme]deps}
    {[testenv:bandit]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:doc8]commands}
    {[testenv:readme]commands}
    {[testenv:bandit]commands}

[testenv:linters-tests]
basepython = python3
deps =
    {[testenv:flake8-tests]deps}
    {[testenv:pylint-tests]deps}
commands =
    {[testenv:flake8-tests]commands}
    {[testenv:pylint-tests]commands}

# Documentation
[testenv:docs]
basepython = python3
deps = -rdoc/requirements.txt
commands =
    sphinx-build -E -c doc/ -b html doc/ doc/build/html

[testenv:serve-docs]
basepython = python3
skip_install = true
changedir = doc/build/html
deps =
commands =
    python -m http.server {posargs}

# Release tooling
[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py sdist bdist_wheel

[testenv:test-release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository testpypi dist/*

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository pypi dist/*
